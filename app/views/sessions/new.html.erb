<h1 align="center">Log In</h1>

<%# Note that this isn't a model-backed form like most of our other forms! %>

<%# If you look at the "horizontal form" code, it is wrapped in form tags with the class
"form-horizontal". However we can't do this here because the embedded Ruby line below with
the "form_for" function actually returns HTML with a form tag. Thus, if we also wrap the code
in form tags like Bootstrap prescribes, we would have duplicate form tags, and Rails would give an error.
The following line therefore is a workaround to add the "form-horizontal" class to our generated
form tag. Note that we do need the "form-horizontal" class to get the styling we want. %>



<%# Since this isn't a model-backed form, two changes to the form_for method call were made:

1. We changed the "@user" argument to ":session". It seems to me that all the first argument does
(at least for a form that isn't model-backed) is specify the name which we want to wrap our form field
inputs in. E.g., if you change ":session" to ":asdfasdf", then if you look at the params output of the
form, you will see a structure that looks like this:

"asdfasdf"=>{"email"=>"riamu@fake.com", "password"=>"asdf"}

The point is that the ":session" argument just changes the name of something in the params hash;
it doesn't have to match up with the name of something that is already a part of our Rails app.

2. We added the "url: login_path" argument %>

<%= form_for(:session, :html => {class: "form-horizontal", role: "form"}, url: login_path) do |f| %>
    <div class="form-group">
        <div class="control-label col-sm-2">
            <%= f.label :email %>
        </div>
        
        <div class="col-sm-8">
            <%= f.email_field :email, class: "form-control", placeholder: "Enter email", autofocus: true %>
        </div>
    </div>
    <div class="form-group">
        <div class="control-label col-sm-2">
            <%= f.label :password %>
        </div>

        <div class="col-sm-8">
            <%= f.password_field :password, class: "form-control", autocomplete: "off" %>
        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-10">
            <%= f.submit "Log In", class: "btn btn-primary btn-lg" %>
        </div>
    </div>
<% end %>

<div class="col-xs-4 col-xs-offset-4">
    [ <%= link_to "Cancel request and return to articles listing", articles_path %> ]
</div>